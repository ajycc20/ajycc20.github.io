<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>→_→傲娇→_→</title>
  
  <subtitle>所爱隔山海，山海皆可平</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ajycc20.github.io/"/>
  <updated>2020-03-10T07:26:13.494Z</updated>
  <id>https://ajycc20.github.io/</id>
  
  <author>
    <name>ajycc20</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初探electron + vue</title>
    <link href="https://ajycc20.github.io/2020/03/10/%E5%88%9D%E6%8E%A2electron-vue/"/>
    <id>https://ajycc20.github.io/2020/03/10/初探electron-vue/</id>
    <published>2020-03-10T07:07:47.000Z</published>
    <updated>2020-03-10T07:26:13.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>之前考虑了很久准备使用<code>electron</code>练练手，写一个桌面应用。一开始打算使用<code>electron-vue</code>直接创建，无奈该项目所使用的版本依赖太过古老，只能自己创建了。</p></blockquote><hr><a id="more"></a><h2 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h2><blockquote><p>使用vue-cli初始化项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vue-cli初始化</span></span><br><span class="line">vue create -d my-project</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>安装electron<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># electron install</span></span><br><span class="line">npm install electron -D or yarn add electron -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是这里建议使用 cnpm install electron -D</span></span><br><span class="line"><span class="comment"># 原因是前两者貌似安装下来都会在构建时候出现问题</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>配置eslint</p></blockquote><h2 id="启动electron"><a href="#启动electron" class="headerlink" title="启动electron"></a>启动electron</h2><blockquote><p>首先在项目根目录下创建electron启动文件</p><p>不建议使用<code>electron.js</code>命名<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// elec.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建浏览器窗口</span></span><br><span class="line">  <span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      nodeIntegration: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里注意入口文件是vue打包后的dist下index.html</span></span><br><span class="line">  <span class="comment">// 加载 index.html</span></span><br><span class="line">  win.loadFile(<span class="string">'dist/index.html'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打开开发者工具</span></span><br><span class="line">  win.webContents.openDevTools()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This method will be called when Electron has finished</span></span><br><span class="line"><span class="comment">// initialization and is ready to create browser windows.</span></span><br><span class="line"><span class="comment">// 部分 API 在 ready 事件触发后才能使用。</span></span><br><span class="line">app.whenReady().then(createWindow)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quit when all windows are closed.</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 在 macOS 上，除非用户用 Cmd + Q 确定地退出，</span></span><br><span class="line">  <span class="comment">// 否则绝大部分应用及其菜单栏会保持激活。</span></span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">    app.quit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 在macOS上，当单击dock图标并且没有其他窗口打开时，</span></span><br><span class="line">  <span class="comment">// 通常在应用程序中重新创建一个窗口。</span></span><br><span class="line">  <span class="keyword">if</span> (BrowserWindow.getAllWindows().length === <span class="number">0</span>) &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>简单配置下vue.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意这里publicPath: './'</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: <span class="string">'./'</span>,</span><br><span class="line">  outputDir: <span class="string">'dist'</span>,</span><br><span class="line">  assetsDir: <span class="string">'static'</span>,</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">      alias: &#123;</span><br><span class="line">        <span class="string">'@'</span>: resolve(<span class="string">'src'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>修改package.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">"script": &#123;</span><br><span class="line">  "electron_dev": "npm run build &amp;&amp; electron elec.js"</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><blockquote><p>不出问题在终端运行 npm run electron_dev 即可弹出GUI</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;之前考虑了很久准备使用&lt;code&gt;electron&lt;/code&gt;练练手，写一个桌面应用。一开始打算使用&lt;code&gt;electron-vue&lt;/code&gt;直接创建，无奈该项目所使用的版本依赖太过古老，只能自己创建了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://ajycc20.github.io/categories/Vue/"/>
    
      <category term="Electron" scheme="https://ajycc20.github.io/categories/Vue/Electron/"/>
    
    
      <category term="Vue" scheme="https://ajycc20.github.io/tags/Vue/"/>
    
      <category term="Electron" scheme="https://ajycc20.github.io/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>&#39;Demo posts&#39;</title>
    <link href="https://ajycc20.github.io/2020/03/05/Demo-posts/"/>
    <id>https://ajycc20.github.io/2020/03/05/Demo-posts/</id>
    <published>2020-03-05T13:45:21.000Z</published>
    <updated>2020-03-05T13:48:14.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="View-the-SpiderX-Frontend-Demo"><a href="#View-the-SpiderX-Frontend-Demo" class="headerlink" title="View the SpiderX-Frontend Demo"></a>View the SpiderX-Frontend Demo</h2><blockquote><p>Demo: <a href="https://ajycc20.github.io/SpiderX-Frontend">SpiderX-Frontend</a></p><p>Source: <a href="https://github.com/endpot/SpiderX-Frontend" target="_blank" rel="noopener">SpiderX-Frontend</a></p></blockquote><h2 id="View-the-easy-css-layout-Demo"><a href="#View-the-easy-css-layout-Demo" class="headerlink" title="View the easy-css-layout Demo"></a>View the easy-css-layout Demo</h2><blockquote><p>Demo: <a href="https://ajycc20.github.io/easy-css-layout">easy-css-layout</a></p><p>Source: <a href="https://github.com/ajycc20/easy-css-layout" target="_blank" rel="noopener">easy-css-layout</a></p></blockquote><h2 id="View-the-museum-Demo"><a href="#View-the-museum-Demo" class="headerlink" title="View the museum Demo"></a>View the museum Demo</h2><blockquote><p>Demo: <a href="https://ajycc20.github.io/museum">museum</a></p><p>Source: <a href="https://github.com/ajycc20/museum-frontend" target="_blank" rel="noopener">museum</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;View-the-SpiderX-Frontend-Demo&quot;&gt;&lt;a href=&quot;#View-the-SpiderX-Frontend-Demo&quot; class=&quot;headerlink&quot; title=&quot;View the SpiderX-Frontend Demo&quot;&gt;
      
    
    </summary>
    
      <category term="Demo" scheme="https://ajycc20.github.io/categories/Demo/"/>
    
    
      <category term="Vue" scheme="https://ajycc20.github.io/tags/Vue/"/>
    
      <category term="Demo" scheme="https://ajycc20.github.io/tags/Demo/"/>
    
  </entry>
  
</feed>
