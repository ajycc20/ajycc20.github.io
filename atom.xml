<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>→_→傲娇→_→</title>
  
  <subtitle>所爱隔山海，山海皆可平</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ajycc20.github.io/"/>
  <updated>2020-03-20T13:12:06.648Z</updated>
  <id>https://ajycc20.github.io/</id>
  
  <author>
    <name>ajycc20</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>auto-givebouns，自动发豆脚本</title>
    <link href="https://ajycc20.github.io/2020/03/20/auto-givebouns%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%8F%91%E8%B1%86%E8%84%9A%E6%9C%AC/"/>
    <id>https://ajycc20.github.io/2020/03/20/auto-givebouns，自动发豆脚本/</id>
    <published>2020-03-20T13:00:55.000Z</published>
    <updated>2020-03-20T13:12:06.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>不甘心啊，还是没有到彻底的解放双手，只完成了发布帖子部分，那咋办嘛，那就只能再写个脚本来进行下一步操作了</p></blockquote><hr><a id="more"></a><h2 id="自动发豆脚本的编写"><a href="#自动发豆脚本的编写" class="headerlink" title="自动发豆脚本的编写"></a>自动发豆脚本的编写</h2><blockquote><p>其实整体逻辑理顺之后，问题也没多少，无外乎获取到帖子的url，获取到帖子的楼层数，触发发豆提交请求三部分</p></blockquote><h3 id="获取帖子Url"><a href="#获取帖子Url" class="headerlink" title="获取帖子Url"></a>获取帖子Url</h3><p>首先是定义了全局变量整个分区的url用作抓取url</p><p>关键代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rePage = <span class="regexp">/&lt;a href="\?.+?(\d+).+?(\d+).+?&gt;\[.+(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;\])/gm</span> <span class="comment">// 这里是抓取全文匹配到该页面所有签到帖</span></span><br><span class="line"><span class="keyword">let</span> arrCheckinLink = res.text.match(rePage) <span class="comment">// 存放所有签到帖的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> datetime = dayjs().format(<span class="string">'YYYY-MM-DD'</span>) <span class="comment">// 当天的日期 用以匹配帖子标题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> patt = <span class="keyword">new</span> <span class="built_in">RegExp</span>(datetime) <span class="comment">// reg化</span></span><br><span class="line"><span class="keyword">let</span> arrPatt = arrCheckinLink.map(<span class="function"><span class="params">val</span> =&gt;</span> patt.test(val)) <span class="comment">// 模式匹配后的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d = arrPatt.indexOf(<span class="literal">true</span>) <span class="comment">// 找到正确的url索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reUrl = <span class="regexp">/&lt;a href="\?.+?(\d+).+?(\d+).+?&gt;\[.+(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;\])/</span></span><br><span class="line">topicId = arrCheckinLink[d].match(reUrl)[<span class="number">2</span>] <span class="comment">// 取出正确的帖子id</span></span><br></pre></td></tr></table></figure></p><h3 id="获取楼层个数"><a href="#获取楼层个数" class="headerlink" title="获取楼层个数"></a>获取楼层个数</h3><blockquote><p>这部分的正则为什么这么写呢，之前爬取全文后分析发现去重的楼层数是直接写入页面的，所以基于正则拿到了这部分内容</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @description 获取发豆机所需楼层个数</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; idUrl 所需的帖子url</span></span><br><span class="line"><span class="comment"> * @returns </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNumOfRe</span>(<span class="params">idUrl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> superagent</span><br><span class="line">  .get(idUrl) <span class="comment">// 这里需要基于发布获取链接分析url</span></span><br><span class="line">  .set(&#123;</span><br><span class="line">    <span class="string">'Cookie'</span>: cookie</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> reCount = <span class="regexp">/(document.getElementById\(\"numofpost\"\)\.value.&#123;4&#125;)(\d+)/</span></span><br><span class="line">    count = res.text.match(reCount)[<span class="number">2</span>] <span class="comment">// 这里基于正则从全文获取到 应该发豆的楼层个数</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发豆提交"><a href="#发豆提交" class="headerlink" title="发豆提交"></a>发豆提交</h3><p>这部分就是构造json然后基于<code>type(&#39;form&#39;)</code>进行提交</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setBonus</span>(<span class="params">count, topicId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> jsonstr = &#123;</span><br><span class="line">    geshu: count, <span class="comment">// 发豆楼层   待获取 done</span></span><br><span class="line">    unrepeat: <span class="string">'on'</span>,</span><br><span class="line">    jine: <span class="string">'100'</span>, <span class="comment">// 发豆个数  一般100  发豆机</span></span><br><span class="line">    rewardtype: <span class="string">'normal'</span>,</span><br><span class="line">    topicid: topicId</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> superagent</span><br><span class="line">    .post(<span class="string">'https://nanyangpt.com/easyreward.php'</span>)</span><br><span class="line">    .set(&#123;</span><br><span class="line">      <span class="string">'Cookie'</span>: cookie</span><br><span class="line">    &#125;)</span><br><span class="line">    .type(<span class="string">'form'</span>)</span><br><span class="line">    .send(jsonstr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于定时器的自动执行"><a href="#基于定时器的自动执行" class="headerlink" title="基于定时器的自动执行"></a>基于定时器的自动执行</h3><blockquote><p>设置了<code>setInterval</code>, <code>1000</code>用于每秒进行探测，然后在定时器内部设定了获取时间用于<code>if</code>判断，到达对应的时间段就触发内部代码(即发豆执行代码)</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote><p>解放双手2333，然鹅还差最后一步未能完成。事实上目前可以自动发帖，自动发豆，但是相对应的帖子高亮仍未分析完全，不是很懂同样的触发提交却得不到相同的结果。</p><p>待续…</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;不甘心啊，还是没有到彻底的解放双手，只完成了发布帖子部分，那咋办嘛，那就只能再写个脚本来进行下一步操作了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://ajycc20.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://ajycc20.github.io/tags/JavaScript/"/>
    
      <category term="RegExp" scheme="https://ajycc20.github.io/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>win10计划任务-autocheckin脚本</title>
    <link href="https://ajycc20.github.io/2020/03/16/win10%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1-autocheckin%E8%84%9A%E6%9C%AC/"/>
    <id>https://ajycc20.github.io/2020/03/16/win10计划任务-autocheckin脚本/</id>
    <published>2020-03-16T05:35:23.000Z</published>
    <updated>2020-03-16T06:21:45.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>前两天脚本写好后就像跑起来测试下，无奈之前的vultr小鸡已经弃之不用了，手头又没有多余的服务器，只好本地跑跑看了</p></blockquote><hr><a id="more"></a><h2 id="设置自启动脚本"><a href="#设置自启动脚本" class="headerlink" title="设置自启动脚本"></a>设置自启动脚本</h2><h3 id="配置bat脚本"><a href="#配置bat脚本" class="headerlink" title="配置bat脚本"></a>配置bat脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node auto-checkin.js</span><br></pre></td></tr></table></figure><blockquote><p>这部分很简单，只要运行bat可以让脚本执行一次就ok</p></blockquote><h3 id="配置计划任务"><a href="#配置计划任务" class="headerlink" title="配置计划任务"></a>配置计划任务</h3><p><code>Win</code> + <code>X</code> 选择<code>计算机管理(G)</code>打开之后，在系统工具栏目选择<code>任务计划程序</code></p><p>最右侧选择<code>创建基本任务</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 创建基本任务</span></span><br><span class="line"></span><br><span class="line">名称：title</span><br><span class="line">描述：description</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发器</span></span><br><span class="line"></span><br><span class="line">这里选择每天</span><br><span class="line"></span><br><span class="line"><span class="comment"># 操作</span></span><br><span class="line"></span><br><span class="line">这里选择启动程序</span><br><span class="line"></span><br><span class="line">程序或脚本： test.bat <span class="comment"># 浏览选择到你上面创建的bat脚本</span></span><br><span class="line">添加参数：值同上</span><br><span class="line">起始于：值为上面的目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完成</span></span><br><span class="line"></span><br><span class="line">完成后在任务计划程序库找到刚刚创建的程序</span><br><span class="line"></span><br><span class="line">选择右侧的属性</span><br><span class="line"></span><br><span class="line">在常规页面：</span><br><span class="line">选择不管用户是否登录都要运行（不勾选其子选项）</span><br><span class="line"></span><br><span class="line">勾选使用最高权限运行</span><br><span class="line"></span><br><span class="line">配置选择： Windows10</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote><p>一开始计划任务没配置好，运行不见代码效果，后来才一点点研究改好了，顺便重构了下前面的代码2333</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;前两天脚本写好后就像跑起来测试下，无奈之前的vultr小鸡已经弃之不用了，手头又没有多余的服务器，只好本地跑跑看了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://ajycc20.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://ajycc20.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>插件-getBingUrl</title>
    <link href="https://ajycc20.github.io/2020/03/13/%E6%8F%92%E4%BB%B6-getBingUrl/"/>
    <id>https://ajycc20.github.io/2020/03/13/插件-getBingUrl/</id>
    <published>2020-03-13T12:43:57.000Z</published>
    <updated>2020-03-13T13:00:46.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知道为什么，之前网站获取必应壁纸的请求突然失效了，菜鸡如我又不怎么会Php，思前想后，决定写个脚本用来暂时替代了</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>脚本本身其实很简单，只有三步</p><h3 id="一、创建按钮"><a href="#一、创建按钮" class="headerlink" title="一、创建按钮"></a>一、创建按钮</h3><p>这里用<code>// @require JQuery</code> 引入了JQuery，方便操作DOM<br>所以第一步的操作也很简单<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'input[type="submit"]'</span>).after()</span><br></pre></td></tr></table></figure></p><blockquote><p>我用了上面的方法将新的按钮附加在了原有的后面</p></blockquote><h3 id="二、发起请求"><a href="#二、发起请求" class="headerlink" title="二、发起请求"></a>二、发起请求</h3><blockquote><p>但是到第二部这里，碰到了常有的问题  CORS跨域请求</p></blockquote><p>想来想去，包括谷歌浏览器跨域插件，或者JQ的跨域等，都没有较好的方法。这时候我突发奇想，搜索了下油猴跨域，突然就get到了<code>GM_xmlhttpRequest</code></p><p>使用<code>// @grant GM_xmlhttpRequest</code> 引入后<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我将请求写到了点击事件里</span></span><br><span class="line">GM_xmlhttpRequest(&#123;</span><br><span class="line">  type: <span class="string">'GET'</span>,</span><br><span class="line">  url: <span class="string">'https://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1'</span>,</span><br><span class="line">  headers: &#123; <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span> &#125;,</span><br><span class="line">  onload: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.responseText)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><blockquote><p>这里直接控制台输出确保数据无误</p></blockquote><h3 id="三、替换链接"><a href="#三、替换链接" class="headerlink" title="三、替换链接"></a>三、替换链接</h3><blockquote><p>替换链接其实很简单</p></blockquote><p>不过首先要先获得返回的JSON数据中对应的url</p><p>这里使用了<code>eval</code>将JSON字符串解析为JSON数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="built_in">eval</span>(<span class="string">'('</span> + res.responseText + <span class="string">')'</span>) <span class="comment">// JSON 对象</span></span><br><span class="line"><span class="keyword">var</span> url = json[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'url'</span>] <span class="comment">// 提取url</span></span><br><span class="line">url = <span class="string">'https://cn.bing.com'</span> + url <span class="comment">// 拼接域名</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>].value = url <span class="comment">// 替换链接</span></span><br></pre></td></tr></table></figure></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote><p>至此大功告成，提交一下链接就可以替换网站背景图片了</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;不知道为什么，之前网站获取必应壁纸的请求突然失效了，菜鸡如我又不怎么会Php，思前想后，决定写个脚本用来暂时替代了&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://ajycc20.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://ajycc20.github.io/tags/JavaScript/"/>
    
      <category term="tampermonkey" scheme="https://ajycc20.github.io/tags/tampermonkey/"/>
    
      <category term="Bing" scheme="https://ajycc20.github.io/tags/Bing/"/>
    
  </entry>
  
  <entry>
    <title>初探electron + vue</title>
    <link href="https://ajycc20.github.io/2020/03/10/%E5%88%9D%E6%8E%A2electron-vue/"/>
    <id>https://ajycc20.github.io/2020/03/10/初探electron-vue/</id>
    <published>2020-03-10T07:07:47.000Z</published>
    <updated>2020-03-10T07:26:13.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>之前考虑了很久准备使用<code>electron</code>练练手，写一个桌面应用。一开始打算使用<code>electron-vue</code>直接创建，无奈该项目所使用的版本依赖太过古老，只能自己创建了。</p></blockquote><hr><a id="more"></a><h2 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h2><blockquote><p>使用vue-cli初始化项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vue-cli初始化</span></span><br><span class="line">vue create -d my-project</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>安装electron<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># electron install</span></span><br><span class="line">npm install electron -D or yarn add electron -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是这里建议使用 cnpm install electron -D</span></span><br><span class="line"><span class="comment"># 原因是前两者貌似安装下来都会在构建时候出现问题</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>配置eslint</p></blockquote><h2 id="启动electron"><a href="#启动electron" class="headerlink" title="启动electron"></a>启动electron</h2><blockquote><p>首先在项目根目录下创建electron启动文件</p><p>不建议使用<code>electron.js</code>命名<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// elec.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建浏览器窗口</span></span><br><span class="line">  <span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      nodeIntegration: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里注意入口文件是vue打包后的dist下index.html</span></span><br><span class="line">  <span class="comment">// 加载 index.html</span></span><br><span class="line">  win.loadFile(<span class="string">'dist/index.html'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打开开发者工具</span></span><br><span class="line">  win.webContents.openDevTools()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This method will be called when Electron has finished</span></span><br><span class="line"><span class="comment">// initialization and is ready to create browser windows.</span></span><br><span class="line"><span class="comment">// 部分 API 在 ready 事件触发后才能使用。</span></span><br><span class="line">app.whenReady().then(createWindow)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quit when all windows are closed.</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 在 macOS 上，除非用户用 Cmd + Q 确定地退出，</span></span><br><span class="line">  <span class="comment">// 否则绝大部分应用及其菜单栏会保持激活。</span></span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">    app.quit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 在macOS上，当单击dock图标并且没有其他窗口打开时，</span></span><br><span class="line">  <span class="comment">// 通常在应用程序中重新创建一个窗口。</span></span><br><span class="line">  <span class="keyword">if</span> (BrowserWindow.getAllWindows().length === <span class="number">0</span>) &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>简单配置下vue.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意这里publicPath: './'</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: <span class="string">'./'</span>,</span><br><span class="line">  outputDir: <span class="string">'dist'</span>,</span><br><span class="line">  assetsDir: <span class="string">'static'</span>,</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">      alias: &#123;</span><br><span class="line">        <span class="string">'@'</span>: resolve(<span class="string">'src'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>修改package.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">"script": &#123;</span><br><span class="line">  "electron_dev": "npm run build &amp;&amp; electron elec.js"</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><blockquote><p>不出问题在终端运行 npm run electron_dev 即可弹出GUI</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;之前考虑了很久准备使用&lt;code&gt;electron&lt;/code&gt;练练手，写一个桌面应用。一开始打算使用&lt;code&gt;electron-vue&lt;/code&gt;直接创建，无奈该项目所使用的版本依赖太过古老，只能自己创建了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://ajycc20.github.io/categories/Vue/"/>
    
      <category term="Electron" scheme="https://ajycc20.github.io/categories/Vue/Electron/"/>
    
    
      <category term="Vue" scheme="https://ajycc20.github.io/tags/Vue/"/>
    
      <category term="Electron" scheme="https://ajycc20.github.io/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>&#39;Demo posts&#39;</title>
    <link href="https://ajycc20.github.io/2020/03/05/Demo-posts/"/>
    <id>https://ajycc20.github.io/2020/03/05/Demo-posts/</id>
    <published>2020-03-05T13:45:21.000Z</published>
    <updated>2020-04-22T06:37:24.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="View-the-SpiderX-Frontend-Demo"><a href="#View-the-SpiderX-Frontend-Demo" class="headerlink" title="View the SpiderX-Frontend Demo"></a>View the SpiderX-Frontend Demo</h2><blockquote><p>Demo: <a href="https://ajycc20.github.io/SpiderX-Frontend">SpiderX-Frontend</a></p><p>Source: <a href="https://github.com/endpot/SpiderX-Frontend" target="_blank" rel="noopener">SpiderX-Frontend</a></p></blockquote><h2 id="View-the-easy-css-layout-Demo"><a href="#View-the-easy-css-layout-Demo" class="headerlink" title="View the easy-css-layout Demo"></a>View the easy-css-layout Demo</h2><blockquote><p>Demo: <a href="https://ajycc20.github.io/easy-css-layout">easy-css-layout</a></p><p>Source: <a href="https://github.com/ajycc20/easy-css-layout" target="_blank" rel="noopener">easy-css-layout</a></p></blockquote><h2 id="View-the-museum-Demo"><a href="#View-the-museum-Demo" class="headerlink" title="View the museum Demo"></a>View the museum Demo</h2><blockquote><p>Demo: <a href="https://ajycc20.github.io/museum-frontend">museum</a></p><p>Source: <a href="https://github.com/ajycc20/museum-frontend" target="_blank" rel="noopener">museum</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;View-the-SpiderX-Frontend-Demo&quot;&gt;&lt;a href=&quot;#View-the-SpiderX-Frontend-Demo&quot; class=&quot;headerlink&quot; title=&quot;View the SpiderX-Frontend Demo&quot;&gt;
      
    
    </summary>
    
      <category term="Demo" scheme="https://ajycc20.github.io/categories/Demo/"/>
    
    
      <category term="Vue" scheme="https://ajycc20.github.io/tags/Vue/"/>
    
      <category term="Demo" scheme="https://ajycc20.github.io/tags/Demo/"/>
    
  </entry>
  
</feed>
